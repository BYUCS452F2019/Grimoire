# This file is a template and might need editing before it works on your project.
# This CI/CD configuration provides a standard pipeline for:
# * building and testing a java maven project
# * build a Docker image from the maven project
# * storing the image in a container registry
# * deploying review apps from branches
# * deploying master to staging
# * deploying the newest tag on master to production
#
# In order to deploy, the gitlab kubernetes integration must be active for your project, whether it's active at the 
# group level or the project level. 
#
# This pipeline expects the following environment variables:
#   REVIEW_DOMAIN* - The base domain name for determing review app environment url and kubernetes routing.
#   STAGING_DOMAIN* - The domain for determing the staging environment url and kubernetes routing.
#   PROD_DOMAIN* - The domain for determing the production environment url and kubernetes routing.
#   GROUP_CI_DEPLOY_USER* - The docker username used if CI_DEPLOY_USER is not set.
#   GROUP_CI_DEPLOY_PASSWORD* - The docker password used if CI_DEPLOY_PASSWORD is not set.
#   CI_DEPLOY_USER - The docker username used to pull private images during deployment jobs.
#   CI_DEPLOY_PASSWORD - The docker password used to pull private images during deployment jobs.
#   CONTEXT_ROOT - The base path your application listens on. This is used to determine the environment url as well as to set up routing rules in kubernetes.
#   *_REPLICAS - These environment variables specify how many replicas of the application should be run in each environment.
#   CONFIG_PROJECT - If defined, the pipeline will place the contents of this project at /srv/config at runtime. See the archetype docs for more info.
#
# Environment variables marked with (*) should be defined at the group level, but can be overridden in project settings or in this file.
#
# CI_DEPLOY_USER and CI_DEPLOY_PASSWORD can be set by creating a project deploy token named `gitlab-deploy-token`.
#
# This pipeline uses the helm chart located at https://gitlab.com/byuhbll/apps/helm-charts/tree/master/charts/spring-app 
# to deploy applications. This can be changed if needed.

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true"
  DOCKER_HOST: tcp://docker:2375/
  CONTEXT_ROOT: grimoire
  REVIEW_REPLICAS: 1
  STAGING_REPLICAS: 1
  PRODUCTION_REPLICAS: 2
  

cache:
  paths:
    - .m2/repository/

stages:
  - maven
  - docker
  - deploy

# This job produces a jar file and uploads the result to gitlab as an artifact.
package:
  image: registry.gitlab.com/byuhbll/apps/gitlab-ci-maven:3-jdk11
  stage: maven
  script: 
    - mvn $MAVEN_OPTS package
  artifacts:
    paths:
      - target/grimoire.jar

# This job runs automated tests and uploads code coverage statistics to gitlab.
verify:
  image: registry.gitlab.com/byuhbll/apps/gitlab-ci-maven:3-jdk11
  stage: maven
  services:
    - docker:dind
  script:
    - mvn $MAVEN_OPTS verify
    - awk -F"," -f /jacoco.awk target/site/jacoco/jacoco.csv || true
  artifacts:
    reports:
      junit: 
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml
  coverage: '/^code coverage:\s*(\d+\.\d+)\s*%/'

# This job runs checkstyle. It is allowed to fail.
checkstyle:
  image: registry.gitlab.com/byuhbll/apps/gitlab-ci-maven:3-jdk11
  stage: maven
  script:
    - mvn $MAVEN_OPTS checkstyle:check
  allow_failure: true

# This job produces a prerelease docker image.
prerelease:
  image: registry.gitlab.com/byuhbll/apps/docker-git
  stage: docker
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE/prerelease:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/prerelease:$CI_COMMIT_REF_SLUG"
  only: 
    - branches

# This job produces a release docker image.
release:
  image: registry.gitlab.com/byuhbll/apps/docker-git
  stage: docker
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    - publish_latest
  only: 
    - tags

# This is the base for all deployment jobs.
.deploy: &deploy
  image: registry.gitlab.com/byuhbll/apps/gitlab-ci-helm
  stage: deploy
  variables:
    HELM_HOST: "localhost:44134"
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/prerelease
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    K8S_SECRET_spring__profiles__active: "common,stage"
    DEFAULT_REPLICAS: $REVIEW_REPLICAS
  script:
    - start_tiller
    - create_secret
    - deploy stable true

# When triggered, this will deploy a review version of the application.
review:
  extends: .deploy
  environment:
    name: review-$CI_COMMIT_REF_NAME
    url: https://$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.$REVIEW_DOMAIN/$CONTEXT_ROOT
    on_stop: stop_review
  only:
    refs:
      - branches
  except:
    - master
  when: manual
  variables:
    K8S_SECRET_kafka__log__name: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG

# This job will redeploy a review version of the application, but it will not deploy the app if it has not already been deployed.
redeploy_review:
  extends: .deploy
  environment:
    name: review-$CI_COMMIT_REF_NAME
    url: https://$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.$REVIEW_DOMAIN/$CONTEXT_ROOT
    on_stop: stop_review
  only:
    refs:
      - branches
  script:
    - start_tiller
    - create_secret
    - deploy
  except:
    - master
  allow_failure: true
  variables:
    K8S_SECRET_kafka__log__name: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG

# This job will undeploy a review version of the application. This job is run when a branch is closed.
stop_review:
  extends: .deploy
  variables:
    GIT_STRATEGY: none
  environment:
    name: review-$CI_COMMIT_REF_NAME
    action: stop
  only:
    refs:
      - branches
  except:
    - master
  when: manual
  script:
    - start_tiller
    - undeploy

# This job deploys the code currently in the master branch to staging.
staging:
  extends: .deploy
  environment:
    name: staging
    url: https://$STAGING_DOMAIN/$CONTEXT_ROOT
  variables:
    DEFAULT_REPLICAS: $STAGING_REPLICAS
  only:
    refs:
      - master

# This job, when triggered, deploys the code currently in the master branch to production as a canary deployment.
canary:
  extends: .deploy
  environment:
    name: production
    url: https://$PROD_DOMAIN/$CONTEXT_ROOT
  variables:
    K8S_SECRET_spring__profiles__active: "common,prod"
    DEFAULT_REPLICAS: $PRODUCTION_REPLICAS
  only:
    refs:
      - master
  when: manual
  script:
    - start_tiller
    - create_secret
    - deploy canary true

# This job runs only on the newest tag on the master branch. It will deploy to production.
production:
  extends: .deploy
  environment:
    name: production
    url: https://$PROD_DOMAIN/$CONTEXT_ROOT
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
    CI_APPLICATION_TAG: $CI_COMMIT_REF_NAME
    K8S_SECRET_spring__profiles__active: "common,prod"
    DEFAULT_REPLICAS: $PRODUCTION_REPLICAS
  only:
    refs:
      - tags
  script:
    - start_tiller
    - create_secret
    - deploy stable true
    - undeploy canary

.bash_functions: &bash_functions |

  # If we're on the newest tag on master, also push the built image to the latest tag
  function publish_latest(){
    git checkout master
    git pull
    LATEST_RELEASE=$(git describe --abbrev=0 --tags || true)
    if [[ "$LATEST_RELEASE" == "$CI_COMMIT_REF_NAME" ]]; then
      docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE"
      docker push "$CI_REGISTRY_IMAGE"
    fi
  }

  # Run tiller locally
  function start_tiller(){
    export TILLER_NAMESPACE="$KUBE_NAMESPACE"
    tiller --storage=secret --history-max=5 &
  }

  # Get the number of replicas in the deployment
  function get_replicas() {
    name="${1}"

    replicas=$(kubectl -n $KUBE_NAMESPACE get deployment $name -o=jsonpath='{.spec.replicas}' || echo $DEFAULT_REPLICAS)

    echo "$replicas"

  }

  # Get the name of the deployment
  function deploy_name() {
    name="$CI_ENVIRONMENT_SLUG"
    track="${1-stable}"

    if [[ "$track" != "stable" ]]; then
      name="$name-$track"
    fi

    echo $name
  }

  # Create the secret for pulling the docker image if the project is private.
  function create_secret() {
    echo "Create secret..."
    if [[ "$CI_PROJECT_VISIBILITY" == "public" ]]; then
      return
    fi

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CI_REGISTRY" \
      --docker-username="${CI_DEPLOY_USER:-$GROUP_CI_DEPLOY_USER}" \
      --docker-password="${CI_DEPLOY_PASSWORD:-$GROUP_CI_DEPLOY_PASSWORD}" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function create_config(){
    config_name="${1}-config"

    echo "Creating ConfigMap..."

    # Try cloning the config project using the same branch as the current one
    git clone --single-branch --branch \
        $CI_COMMIT_REF_NAME https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.com/$CONFIG_PROJECT.git k8s-configmap  || true
    
    # If the config project does not have a matching branch, clone master
    if [[ ! -d "k8s-configmap" ]]; then
      git clone --single-branch --branch master https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.com/$CONFIG_PROJECT.git k8s-configmap
    fi

    # If we're not deploying to production, delete the production config.
    if [[ $CI_ENVIRONMENT_SLUG != "production" ]]; then
      rm -f k8s-configmap/application-prod.yml
    fi

    kubectl -n $KUBE_NAMESPACE create secret generic $config_name --from-file=k8s-configmap/ -o yaml --dry-run | kubectl replace -n $KUBE_NAMESPACE --force -f - 
    
  }

  function create_env(){
    env_name="${1}-env"
    echo "Creating env secret..."


    # Write K8S_SECRET_* envs to a file.
    env | sed -n "s/^K8S_SECRET_\(.*\)$/\1/p" > k8s_prefixed_variables
    
    # Replace __ (double underscore) with .
    while IFS= read -r line
    do
      IFS='=' read -ra parts <<< $line
      echo -n ${parts[0]} | sed "s/__/./g" >> k8s_prefixed_variables_fixed
      echo "=${parts[1]}" >> k8s_prefixed_variables_fixed
    done < k8s_prefixed_variables

    # Add them to a secret
    kubectl create secret \
      -n "$KUBE_NAMESPACE" generic "$env_name" \
      --from-env-file k8s_prefixed_variables_fixed -o yaml --dry-run |
      kubectl replace -n "$KUBE_NAMESPACE" --force -f -

    rm k8s_prefixed_variables
    rm k8s_prefixed_variables_fixed
  }

  # Deploy the application
  function deploy() {
    track="${1-stable}"
    initialize="${2:-false}"
    forceDistributed="false"
    
    if [[ "$initialize" != "true" && -z $(helm ls -q "$CI_ENVIRONMENT_SLUG") ]]; then
      echo "this app is not yet deployed. Skipping redeploy."
      return 1
    fi

    #If this is the production environment, only deploy if on the newest tag on master.
    if [[ "$CI_ENVIRONMENT_SLUG" == "production" ]]; then

      if [[ "$track" == "stable" ]]; then
        git checkout master
        git pull
        LATEST_RELEASE=$(git describe --abbrev=0 --tags || true)
        if [[ "$LATEST_RELEASE" != "$CI_COMMIT_REF_NAME" ]]; then
          echo "This is not the latest tag. Not deploying to production."
          return
        fi
      fi

      export K8S_SECRET_edu__byu__hbll__default__log__kafka__servers__ssl=$PROD_KAFKA_SERVERS
      forceDistributed="true"
    fi

    # Get the name, replicas, and image pull secret for this deployment
    name=$(deploy_name "$track")
    replicas=$(get_replicas $name)

    if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
      secret_name='gitlab-registry'
    else
      secret_name=''
    fi

    # Create the environment and (if necessary) the config secret
    create_env $name

    if [[ -z $CONFIG_PROJECT ]]; then
      configsecret=''
    else
      create_config $name
      configsecret="$name-config"
    fi

    # only create the route if we're doing a stable deployment
    route_enabled="true"
    if [[ "$track" != "stable" ]]; then
      route_enabled="false"
    fi

    # Initialize helm and add our repo.
    helm init --client-only
    helm repo add byuhbll https://byuhbll.gitlab.io/apps/helm-charts

    # Deploy
    echo "Redeploying application..."
    helm upgrade --install --force --wait \
      --set application.configsecret="$configsecret" \
      --set application.envsecret="$name-env" \
      --set application.forceDistributed="$forceDistributed" \
      --set application.routeEnabled="$route_enabled" \
      --set application.spring.profile="$SPRING_PROFILE" \
      --set application.timestamp="time-$(date +'%s')" \
      --set gitlabEnvironmentSlug="$CI_ENVIRONMENT_SLUG" \
      --set gitlabEnvironmentUrl="$CI_ENVIRONMENT_URL" \
      --set gitlabProjectPathSlug="$CI_PROJECT_PATH_SLUG" \
      --set image.repository="$CI_APPLICATION_REPOSITORY" \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.secrets[0].name="$secret_name" \
      --set replicaCount="$replicas" \
      "$name" \
      byuhbll/spring-app
    

  }

  # Remove all resources related to this deployment
  function undeploy(){
    track="${1-stable}"
    name=$(deploy_name "$track")
    if [[ -n "$(helm ls -q "^$name$")" ]]; then
      echo "Undeploying $name"
      helm delete --purge "$name"
    fi

    kubectl -n $KUBE_NAMESPACE delete secret $name-config || true
    kubectl -n $KUBE_NAMESPACE delete secret $name-env || true
  }

before_script:
  - *bash_functions
